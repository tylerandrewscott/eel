setwd('../eel/')
add.edges(x = cnet,tail =match(temp_net[Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
add.edges(x = inet,tail =match(temp_net[Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c21,3),]$Alter_ID,network.vertex.names(net)))
?add.edges
network::add.edges(x = cnet,tail =match(temp_net[Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
n = 1
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
#setwd('~/Documents/Github/eel')
#system('ln -s ~/Box/eel/input/ ~/Documents/GitHub/eel')
#system('ln -s ~/Box/eel/output/ ~/Documents/GitHub/eel')
pgks = c('tidyverse','statnet','tidyselect','ggnetwork','ggthemes','fergm','data.table','magrittr')
lapply(pgks[!pgks %in% installed.packages()[,'Package']],install.packages)
lapply(pgks,require,character.only = TRUE)
sheet_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTg6ChPQBBftPdUB-IFq4OQGFyDruWwBBDyJpPmcPSiSOV1Y_bEx2XeF_wR6vkq-rY4TW2-ZAMP4alN/pub?gid=456743467&single=true&output=csv"
df = fread(sheet_url)
df2 = df
df <- df[!is.na(df$`Record ID`),]
setnames(df,c('Role',"R02 ASW","Record ID"),c('Level','Network',"ID"))
df <- df[df$Network>0&df$Network<15,]
df <- df[,!names(df) %in% c('R25 1 ASOW','R25 2 ASOW','R27 1 ASOW','R27 2 ASOW'),with = F]
df <- df[df$ID %in% df$ID[!sapply(df$ID,function(x) all(melt(df[df$ID==x,grepl('R25|R26|R27',names(df)),with = F])$value %in% c(-2,-5)))],]
role_vectors <- paste0('R05 AW ',c(1:23,35,36))
nms_role_vectors <- paste0('R05 SO ',c(24:30,32:34))
role_url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vShimT8Fb2xCUXjoOaHBCCOaj3UgtHNK5jufXBeltwqnBpqrGd_5aABGQcRAc-kmXOA14LVnpZi1lba/pub?output=csv'
#roles_url = 'input/Roles_Code_Cleaned.csv'
roles_df <- fread(role_url)
id_roles = melt(df[,c('ID','Network','Level',role_vectors,nms_role_vectors),with = F],id.vars = c('ID','Network','Level'),value.name ='Response',variable.name = 'Role' )
id_roles <- id_roles[!grepl('Other ONMS staff',id_roles$Role),]
id_roles = id_roles[id_roles$Response>0,]
id_roles[,Response:=NULL]
id_roles$Role_ID <- paste(id_roles$ID,id_roles$Role,sep='_')
id_roles$Self_Role_Name <- roles_df$Role_Name[match(id_roles$Role,roles_df$Role)]
#questions about alters
#Q25 - which ONMS staff do you communicate with: R25‐ASOW.1 - R25‐ASOW.15
#Q26 - which gov folks do you communicate with: R26‐ASOW.1 - R26‐ASOW.10
#Q27 - which non-gov folks do you communicate with: R27‐ASOW.1 - R27‐ASOW.16
role_count = id_roles[,.N,by=.(Network,Self_Role_Name)]
setnames(role_count,'N','role_count')
actor_details <- data.table(ID = df$ID,Actor_Type =ifelse(df$`R01 ASW`%in%c(1,2),'Advisory Council',ifelse(df$`R01 ASW`%in%c(5,6),'Staff Member','Working Group')),
Time_Involved = df$`R03 ASOW`,Network = df$Network)
alters_df = Reduce(function(u,v) merge(u,v,all=TRUE),list(gather(df[,c('ID','Network',grep('R25',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R26',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network),
gather(df[,c('ID','Network',grep('R27',names(df),value=T)),with = F],Alter_Role,Response,-ID,-Network)))
alters_df  = data.table(alters_df )
alters_df$Response[alters_df$Response==-1] <- 0
did_not_complete = alters_df[,all(Response<0),by=.(ID)][V1==TRUE,]$ID
df = df[!df$ID %in% did_not_complete,]
id_roles = id_roles[!id_roles$ID %in% did_not_complete,]
dyad_df <- merge(actor_details,alters_df)
dyad_df$Alter_Role_Name <- as.factor(roles_df$Role_Name[match(dyad_df$Alter_Role,roles_df$Role)])
#dyad_df$ID = as.factor(dyad_df$ID)
dyad_df = dyad_df[dyad_df$Network<=14,]
dyad_df$Network = as.factor(dyad_df$Network)
dyad_df = dyad_df[dyad_df$Response %in% c(1:3),]
id_roles$Network = as.factor(id_roles$Network)
dyad_expansion_df = merge(dyad_df,id_roles,all = T,allow.cartesian = T,by = c('ID','Network'))
dyad_expansion_df$Self_Role_Name = as.factor(dyad_expansion_df$Self_Role_Name)
dyad_expansion_df$Self_Role_Name = fct_expand(dyad_expansion_df$Self_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
dyad_expansion_df$Alter_Role_Name = fct_expand(dyad_expansion_df$Alter_Role_Name,union(levels(dyad_expansion_df$Self_Role_Name),levels(dyad_expansion_df$Alter_Role_Name)))
tdf = dyad_expansion_df
tdf = tdf[tdf$Self_Role_Name!='NGO',]
tdf = tdf[!is.na(tdf$ID),]
tdf$Self_Role_Name = as.character(tdf$Self_Role_Name)
tdf$Level[is.na(tdf$Level)&tdf$Actor_Type=='Advisory Council'] <- 'A'
set = 1:14
testn = lapply(1:14,function(n) {
print(n)
temp_df = tdf %>% filter(Network==n)
temp_df$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_df$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
#temp_df = temp_df[!is.na(temp_df$Alter_ID),]
mnet = multinet::ml.empty()
add.layers.ml(mnet,as.character(unique(temp_df$Level)),directed = rep(TRUE,length(unique(temp_df$Level))))
add.actors.ml(mnet,as.character(unique(temp_df$ID)))
add.actors.ml(mnet,as.character(unique(temp_df$Alter_ID)))
n1 = data.frame(grep('^W',temp_df$ID,value=T),rep('W',sum(grepl('^W',temp_df$ID))),stringsAsFactors = F);n1 = n1[!duplicated(n1),]
if(nrow(n1)>0){add.vertices.ml(mnet,n1)}
n2 = data.frame(grep('^A',temp_df$ID,value=T),rep('A',sum(grepl('^A',temp_df$ID))),stringsAsFactors = F);n2 = n2[!duplicated(n2),]
if(nrow(n2)>0){add.vertices.ml(mnet,n2)}
n3 = data.frame(grep('^S',temp_df$ID,value=T),rep('S',sum(grepl('^S',temp_df$ID))),stringsAsFactors = F);n3 = n3[!duplicated(n3),]
if(nrow(n3)>0){add.vertices.ml(mnet,n3)}
edges = data.frame(ID = temp_df$ID,Level = temp_df$Level,Alter_ID = temp_df$Alter_ID,Alter_Level = str_extract(temp_df$Alter_ID,'^[A-Z]{1}'),stringsAsFactors = F)
isols = edges[is.na(edges$Alter_Level),]
edges = edges[!is.na(edges$Alter_Level),]
print(nrow(isols)/(nrow(edges)+nrow(isols)))
#isols <- isols[!isols$temp_df.ID %in% edges$temp_df.ID,]
add.edges.ml(mnet,edges)
mnet})
n = 1
temp_net = tdf[Network==n]
temp_net$Alter_ID = id_roles$ID[id_roles$Network==n][match(temp_net$Alter_Role_Name,id_roles$Self_Role_Name[id_roles$Network==n])]
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
temp_net
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
plot(inet)
#devtools::install_github("tedhchen/multilayer.ergm")
library(multilayer.ergm)
mnet <- to.multiplex(inet,cnet, output = "network")
test = fergm(mnet,form = "edges + twopath")
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = F,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
mnet <- to.multiplex(inet,cnet, output = "network")
test = fergm(mnet,form = "edges + twopath")
mnet
test = fergm(mnet,form = "edges")
mnet
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = F,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
cnet
mnet <- to.multiplex(inet,cnet, output = "network",directed = F)
test = fergm(mnet,form = "edges")
test = fergm(mnet,form = "edges + triangle")
1e4
test = fergm(mnet,form = "edges + gwesp(0,fixed = T) + gwdegree(0,fixed = T)",seed = 24,warmup = 1e3,chains = 4,iter = 1e3,cores = 4)
test = fergm(mnet,form = "edges + gwesp(0,fixed = T) + gwdegree(0,fixed = T)",seed = 24,warmup = 1e3,chains = 4,iter = 1e4,cores = 4)
summary(test)
test
class(mnet)
mnet
mnet %v% 'layer.mem'
mnet
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + edges_layer(layer = 2) +
+ mutual("layer.mem", diff = T),
control = control.ergm(seed = 24),
constraints = ~fixallbut(free))
summary(mod.within)
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + edges_layer(layer = 2) +
mutual("layer.mem", diff = T),
control = control.ergm(seed = 24),
constraints = ~fixallbut(free))
summary(mod.within)
2+2
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + edges_layer(layer = 2) +
mutual("layer.mem", diff = T),
control = control.ergm(seed = 24),
constraints = ~fixallbut(free))
mod.within
mod.within <- ergm(mnet ~ edges_layer(layer = 1) +
edges_layer(layer = 2))
mod.within
summary(mod.within)
?multilayer_terms.
?multilayer_terms
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2)
summary(mod.within)
mutual("layer.mem", diff = T),
control = control.ergm(seed = 24),
constraints = ~fixallbut(free))
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2))
summary(mod.within)
js_url = 'https://bythenumbers.sco.ca.gov/resource/fv6y-3v29.json'
require(jsonlite)
test = fromJSON(js_url)
head(test)
dim(test)
test = fread('https://bythenumbers.sco.ca.gov/api/views/fv6y-3v29/rows.csv?accessType=DOWNLOAD')
dim(test)
grep('Transit|Transportation',test$`Entity Name`,value = T)
grep('Sacramento',test$`Entity Name`,value = T)
grep('Council',test$`Entity Name`,value = T)
summary(mod.within)
net = network::network.initialize(n = length(unique(temp_net$ID)),directed = T,bipartite = F)
net %v% 'vertex.names' <- sort(unique(temp_net$ID))
cnet = net
inet = net
network::add.edges(x = cnet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(1,3),]$Alter_ID,network.vertex.names(net)))
network::add.edges(x = inet,tail =match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$ID,network.vertex.names(net)),head = match(temp_net[!is.na(Alter_ID)&Response%in%c(2,3),]$Alter_ID,network.vertex.names(net)))
mnet <- to.multiplex(inet,cnet, output = "network",directed = T)
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2))
summary(mod.within)
?multilayer_terms
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2) +
mutual("layer.mem", diff = T) + duplexdyad(type = c('e','f'),layers = c(1,2)),eval.loglik = F,
control = control.ergm(parallel=4,MCMC.samplesize = 1e4))
mod.within <- ergm(mnet ~ edges_layer(layer = 1) + gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2) +
mutual("layer.mem", diff = T) +duplexdyad(c("e", "f"), layers = list(1, 2)),
eval.loglik = F,
control = control.ergm(parallel=4,MCMC.samplesize = 1e4))
summary(mod.within)
mod.within <- ergm(mnet ~ edges_layer(layer = 1) +
#gwesp_layer(0,fixed = T,layer = 1) +
#edges_layer(layer = 2) + gwesp_layer(0,fixed = T,layer = 2) +
mutual("layer.mem", diff = T) +
duplexdyad(c("e", "f"), layers = list(1, 2)),
eval.loglik = F,
control = control.ergm(parallel=4,MCMC.samplesize = 1e3))
mod.within <- ergm(mnet ~ edges_layer(layer = 1) +
#gwesp_layer(0,fixed = T,layer = 1) +
edges_layer(layer = 2) +
#gwesp_layer(0,fixed = T,layer = 2) +
mutual("layer.mem", diff = T) +
duplexdyad(c("e", "f"), layers = list(1, 2)),
eval.loglik = F,
control = control.ergm(parallel=4,MCMC.samplesize = 1e3))
